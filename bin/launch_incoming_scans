#!/usr/bin/env ruby

require 'Nessus6'
require 'fileutils'
require 'logger'
require 'sqlite3'
require 'json'

def create_scan(scan_id_to_copy, opts)
  @client.scan.copy scan_id_to_copy, opts
end

def launch_scan(target_scan_id, target_ip_addresses)
  @logger.info 'Attempting to launch scan.'
  begin
    result = @client.scan.launch target_scan_id, target_ip_addresses
    if result.key? 'scan_uuid'
      @logger.info "Scan launched successfully. Scan has been assigned a UUID of #{result['scan_uuid']}."
      result
    else
      @logger.info 'Failed to launch scan due to an unknown reason..'
      false
    end
  rescue Nessus6::Error::InternalServerError
    @logger.error 'Failed to launch scan. A scan is already running.'
    false
  end
end

# Global variables for the script / binary
@base_directory = '/opt/scanner'
@temp_directory = "#{@base_directory}/temp#{Process.pid}"
@incoming_directory = "#{@base_directory}/targets/incoming"
@results_directory = "#{@base_directory}/results"
@send_mail = '/usr/lib/sendmail -t'

credentials = {
  access_key: 'eeb88394142b4b328332c2448e0f04846161493a50feaa454cbb2fa5083919f9',
  secret_key: 'b0d69c23612754367a84d168f2e7d6769aff1342cb25aa345481cb537164e092'
}

nessus_location = {
  ip: 'localhost',
  port: '8834'
}

scan_templates = {
  allportsnoping: 62,
  allportswithping: 63,
  atomic: 64,
  default: 61,
  pci: 60
}

@append_results = "x-scanner|#{nessus_location[:ip]}"

begin
  # Prep work
  @logger = Logger.new(STDOUT)
  @logger.level = Logger::INFO

  @logger.info "Creating temporary directory: #{@temp_directory}"
  FileUtils.mkdir_p @temp_directory

  # Begin the main portion of the app
  @logger.debug 'Creating Nessus API Client'
  @client = Nessus6::Client.new credentials, nessus_location

  # Loop through the directory and process each file in it.
  Dir.foreach(@incoming_directory) do |file|
    @logger.debug "Processing #{@incoming_directory}/#{file}"
    next if file == '.' || file == '..' # skip current / parent directory opts

    @logger.info "Archiving #{@incoming_directory}/#{file} to " \
                 "#{@base_directory}/targets/archive/#{file}."
    FileUtils.copy "#{@incoming_directory}/#{file}",
                   "#{@base_directory}/targets/archive/#{file}"

    @logger.info "Moving #{@incoming_directory}/#{file} to " \
                 "#{@temp_directory}/#{file}"
    FileUtils.move "#{@incoming_directory}/#{file}",
                   "#{@temp_directory}/#{file}"

    @logger.info 'Finding the target scan details (id, method, target ip).'
    file_contents = File.open("#{@temp_directory}/#{file}") { |file| file.read }

    # Take the request file and process each line individually
    file_array = file_contents.split("\n")

    request_id = []
    method = []
    ips = []

    # Process the request file and find the Request ID, Method, and IP Addresses
    file_array.each do |line|
      if line =~ /requestid\:\t(?<request_id>\d+)/
        request_id.push line[11..-1]
        next
      end
      if line =~ /method\:\t(?<method>.+)/
        method.push line[8..-1]
        next
      end
      ips.push line[0..-3] if line =~ /^(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d$/
      ips.push line[0..-4] if line =~ /^(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d\d$/
      next
    end

    @logger.info "Found Request ID #{request_id[0]}; Found Method #{method[0]}; Found IP's #{ips}"

    # Take the scan method and find the scan template UUID for it.
    scan_template_id = scan_templates[method[0].to_sym]
    scan_opts = { name: "Requested Scan ##{request_id[0]}", folder_id: 65,
                  history: 'false' }
    scan = create_scan scan_template_id, scan_opts

    # Attempt to launch a scan. If it fails, wait 30 seconds then repeat.
    @result = launch_scan(scan['id'], ips)
    while @result == false
      sleep 30
      @result = launch_scan(scan_id_to_launch, ips)
    end

    @logger.info 'Attempting to connect to database'

    db = SQLite3::Database.new '/home/scripts/launched_nessus_scans.db'

    @logger.debug "Create new db with: require 'sqlite3'; db = SQLite3::Database.new '/home/scripts/launched_nessus_scans.db'; rows = db.execute 'create table active_scans (request_id bigint, method varchar(200), scan_uuid varchar(250), scan_id integer);'"

    @logger.info "Inserting scan UUID with 'INSERT INTO active_scans (request_id, method, scan_uuid, scan_id) VALUES (?, ?, ?, ?)', "\
                 "[#{request_id[0]}, #{method[0]}, #{@result['scan_uuid']}, #{scan['id']}]'"

    db.execute 'INSERT INTO active_scans (request_id, method, scan_uuid, scan_id) VALUES (?, ?, ?, ?)',
               [request_id[0], method[0], @result['scan_uuid'], scan['id']]

    @logger.info 'Scan UUID saved successfully.'

    @logger.info "Removing the temporary scan file #{@temp_directory}/#{file}"
    FileUtils.rm "#{@temp_directory}/#{file}"
  end
ensure
  @logger.info "Removing temp directory: #{@temp_directory}"
  FileUtils.rm_rf "#{@temp_directory}"
end
