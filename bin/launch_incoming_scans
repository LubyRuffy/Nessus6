#!/usr/bin/env ruby

require 'Nessus6'
require 'fileutils'
require 'logger'

# Global variables for the script / binary
@base_directory = '/opt/scanner'
@temp_directory = "#{@base_directory}/temp#{Process.pid}"
@incoming_directory = "#{@base_directory}/targets/incoming"
@results_directory = "#{@base_directory}/results"
@send_mail = '/usr/lib/sendmail -t'

credentials = {
  access_key: '',
  secret_key: ''
}

nessus_location = {
  ip: 'localhost',
  port: '8834'
}

scan = {
  default: 13
}

@append_results = "x-scanner|#{nessus_location[:ip]}"

# Prep work
FileUtils.mkdir_p @temp_directory
@logger = Logger.new(STDOUT)
@logger.level = Logger::INFO

# Begin the main portion of the app
@logger.debug 'Creating Nessus API Client'
@client = Nessus6::Client.new credentials, nessus_location

Dir.foreach(@incoming_directory) do |file|
  @logger.debug "Processing #{@incoming_directory}/#{file}"
  next if file == '.' || file == '..' # skip current / parent directory opts

  @logger.info "Archiving #{@incoming_directory}/#{file} to " \
               "#{@base_directory}/targets/archive/#{file}."
  # FileUtils.copy "#{@incoming_directory}/#{file}",
  #                "#{@base_directory}/targets/archive/#{file}"

  @logger.info "Moving #{@incoming_directory}/#{file} to " \
               "#{@temp_directory}/#{file}"
  # FileUtils.move "#{@incoming_directory}/#{file}",
  #                "#{@temp_directory}/#{file}"

  @logger.info 'Finding the target scan details (id, method, target ip).'
  file = File.open("#{@incoming_directory}/#{file}") { |file| file.read }

  file_array = file.split("\n")

  request_id = []
  method = []
  ips = []

  file_array.each do |line|
    if line =~ /requestid\:\t(?<request_id>\d+)/
      request_id.push line[11..-1]
      next
    end
    if line =~ /method\:\t(?<method>.+)/
      method.push line[8..-1]
      next
    end
    ips.push line[0..-3] if line =~ /^(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d$/
    ips.push line[0..-4] if line =~ /^(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/\d\d$/
    next
  end

  @logger.info "Found Request ID #{request_id[0]}; Found Method #{method[0]}; Found IP's #{ips}"

  scan_id_to_launch = scan[method[0].to_sym]

  @logger.info 'Launching scan.'
  result = @client.scan.launch scan_id_to_launch, ips
  if result.key? 'scan_uuid'
    @logger.info "Scan launched successfully. Scan has been assigned a UUID of #{result['scan_uuid']}."
  else
    @logger.info 'Launching the scan failed.'
  end
end
